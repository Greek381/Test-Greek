:root {
  --color-white: #ffffff;
  --color-black: #000000;
}
html {
  box-sizing: border-box;
  line-height: 1.15;
  -webkit-text-size-adjust: 100%;
}
*,
::after,
::before {
  box-sizing: inherit;
}
body {
  display: flex;
  flex-direction: column-reverse;
  font-family: "TT Travels", sans-serif;
  background-color: var(--color-white);
  margin: 0;
}
a {
  text-decoration: none;
  background-color: transparent;
}
.list-reset {
  list-style: none;
  margin: 0;
  padding: 0;
}
.site-container {
  overflow: hidden;
}
.for-mobile {
  display: none;
}
.btn-reset {
  border: none;
  background: 0 0;
  cursor: pointer;
}
.container {
  margin: 0 auto;
  padding: 0 15px;
  max-width: 1720px;
}
@font-face {
  font-family: "TT Travels";
  src: url(fonts/TTTravels-Regular.woff2) format("woff2");
  font-weight: 400;
  font-display: swap;
  font-style: normal;
}
@font-face {
  font-family: "TT Travels";
  src: url(fonts/TTTravels-DemiBold.woff2) format("woff2");
  font-weight: 500;
  font-display: swap;
  font-style: normal;
}
.cards {
  padding: 133px 0 233px;
}
.cards__list {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  -moz-column-gap: 57px;
  column-gap: 57px;
  row-gap: 50px;
}
.cards__item {
  padding: 25px 30px 39px;
  display: grid;
  grid-template-rows: auto 110px auto auto auto;
  border-radius: 10px;
  background: var(--color-white);
  box-shadow: 0 4px 15px 0 rgba(0, 0, 0, 0.12);
}
.cards__date {
  margin: 0 0 19px;
  font-weight: 500;
  font-size: 18px;
  line-height: normal;
  color: var(--color-black);
}
.cards__logo {
  display: block;
  width: 90px;
  align-self: center;
}
.cards__name {
  margin: 0 0 15px;
  font-weight: 500;
  font-size: 24px;
  line-height: normal;
  color: var(--color-black);
  align-self: baseline;
}
.cards__brief {
  margin: 0 0 17px;
  font-weight: 400;
  font-size: 16px;
  line-height: normal;
  color: var(--color-black);
}
.cards-geo {
  margin: 0 0 12px;
  display: flex;
  align-items: center;
}
.cards-geo svg {
  width: 12px;
  height: 18px;
  margin-right: 8px;
}
.cards-geo__location {
  margin: 0;
  font-weight: 400;
  font-size: 14px;
  line-height: normal;
  color: var(--color-black);
}
.cards-site {
  margin: 0 0 25px;
  display: flex;
  align-items: center;
}
.cards-site svg {
  width: 13px;
  height: 13px;
  margin-right: 8px;
}
.cards-site__link {
  display: block;
  margin: 0;
  font-weight: 400;
  font-size: 14px;
  line-height: normal;
  color: var(--color-black);
  text-decoration: underline;
}
.cards-links {
  display: flex;
  align-items: center;
}
.cards-links__buy {
  padding: 9px 20px;
  margin-right: 31px;
  width: -moz-max-content;
  width: max-content;
  display: block;
  font-weight: 500;
  font-size: 18px;
  line-height: normal;
  color: var(--color-white);
  background-color: #6b46d4;
  transition: all .3s ease-in-out;
}
.cards-links__buy:hover {
  opacity: .7;
}
.cards-links__more {
  margin: 0;
  display: block;
  font-weight: 500;
  font-size: 18px;
  line-height: normal;
  color: #6b46d4;
  text-decoration: underline;
  transition: all .3s ease-in-out;
}
.cards-links__more:hover {
  text-decoration: none;
}
@media (max-width: 1750px) {
  .cards {
    padding: 75px 0;
  }
  .cards__list {
    grid-template-columns: repeat(3, 1fr);
    -moz-column-gap: 40px;
    column-gap: 40px;
  }
}
@media (max-width: 1300px) {
  .cards {
    padding: 45px 0;
  }
  .cards__list {
    grid-template-columns: repeat(2, 1fr);
    -moz-column-gap: 20px;
    column-gap: 20px;
  }
}
@media (max-width: 820px) {
  .cards {
    padding: 20px 0;
  }
  .cards__list {
    margin: 0 auto;
    max-width: 340px;
    grid-template-columns: repeat(1, 1fr);
    -moz-column-gap: 0;
    column-gap: 0;
    row-gap: 20px;
  }
  .cards__item {
    padding: 10px;
  }
  .cards-links {
    flex-direction: column;
    align-items: flex-start;
  }
  .cards-links__buy {
    margin: 0 0 15px;
  }
}
.footer {
  position: relative;
  padding: 58px 0;
  background-color: #262529;
}
.footer-top {
  margin: 0 0 110px;
  display: flex;
  align-items: center;
}
.footer-left {
  max-width: 589px;
}
.footer-left__text {
  margin: 0 0 20px;
  font-weight: 400;
  font-size: 18px;
  line-height: normal;
  color: var(--color-white);
}
.footer-left__text span {
  font-weight: 500;
}
.footer-left__text a {
  color: var(--color-white);
}
.footer-left__text:last-child {
  margin: 0;
}
.footer-left__text:first-child span {
  display: block;
}
.footer__img {
  position: absolute;
  right: 0;
  top: 0;
  width: 58%;
  max-width: 1117px;
}
.footer-bottom {
  display: flex;
  align-items: center;
}
.footer-bottom__year {
  margin: 0 auto 0 0;
  font-weight: 500;
  font-size: 36px;
  line-height: normal;
  color: var(--color-white);
  letter-spacing: -1.8px;
}
.footer-bottom__list {
  position: relative;
  width: 80%;
  max-width: 1365px;
  display: flex;
  align-items: center;
  justify-content: space-between;
}
.footer-bottom__list::before {
  content: "";
  position: absolute;
  left: 0;
  right: 0;
  top: -16px;
  width: 100%;
  height: 1px;
  background-color: var(--color-white);
  z-index: 2;
}
.footer-bottom__item {
  position: relative;
  font-weight: 500;
  font-size: 18px;
  line-height: normal;
  color: var(--color-white);
  letter-spacing: -0.9px;
}
.footer-bottom__item:nth-child(5)::before {
  content: "";
  position: absolute;
  top: -21px;
  left: 0;
  right: 0;
  width: 35px;
  height: 10px;
  background-color: var(--color-white);
  border-radius: 10px;
  z-index: 3;
}
@media (max-width: 1300px) {
  .footer-top {
    margin: 0 0 60px;
  }
  .footer-left {
    width: 45%;
  }
  .footer__img {
    top: 30px;
    width: 50%;
  }
}
@media (max-width: 1047px) {
  .footer-bottom {
    flex-direction: column-reverse;
  }
  .footer-bottom__list {
    margin: 0 0 30px;
    width: 100%;
  }
  .footer-bottom__year {
    margin: 0 auto;
  }
  .footer__img {
    top: 115px;
  }
}
@media (max-width: 820px) {
  .footer-bottom,
  .footer-top {
    flex-direction: column-reverse;
  }
  .footer-bottom__list {
    margin: 0 0 30px;
    width: 100%;
    flex-wrap: wrap;
  }
  .footer-bottom__item {
    font-size: 15px;
  }
  .footer-bottom__year {
    margin: 0 auto;
  }
  .footer__img {
    position: initial;
    margin: 0 auto 20px;
  }
  .footer-left {
    width: 100%;
  }
} /*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */
details,
main {
  display: block;
}
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}
hr {
  box-sizing: content-box;
  height: 0;
  overflow: visible;
}
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}
abbr[title] {
  border-bottom: none;
  text-decoration: underline;
  -webkit-text-decoration: underline dotted;
  text-decoration: underline dotted;
}
b,
strong {
  font-weight: bolder;
}
small {
  font-size: 80%;
}
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}
sub {
  bottom: -0.25em;
}
sup {
  top: -0.5em;
}
img {
  max-width: 100%;
  border-style: none;
}
button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  font-size: 100%;
  line-height: 1.15;
  margin: 0;
}
button,
input {
  overflow: visible;
}
button,
select {
  text-transform: none;
}
[type="button"],
[type="reset"],
[type="submit"],
button {
  -webkit-appearance: button;
}
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner,
button::-moz-focus-inner {
  border-style: none;
  padding: 0;
}
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring,
button:-moz-focusring {
  outline: ButtonText dotted 1px;
}
fieldset {
  padding: 0.35em 0.75em 0.625em;
}
legend {
  box-sizing: border-box;
  color: inherit;
  display: table;
  max-width: 100%;
  padding: 0;
  white-space: normal;
}
progress {
  vertical-align: baseline;
}
textarea {
  overflow: auto;
}
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  padding: 0;
}
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}
[type="search"] {
  -webkit-appearance: textfield;
  outline-offset: -2px;
}
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}
::-webkit-file-upload-button {
  -webkit-appearance: button;
  font: inherit;
}
summary {
  display: list-item;
}
[hidden],
template {
  display: none;
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
